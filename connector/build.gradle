import groovy.json.JsonOutput

plugins {
    id "java-library"
    id "com.gradleup.shadow" version "9.0.0-beta6"
}

dependencies {
    // littlehorse
    implementation "io.littlehorse:littlehorse-client:${lhVersion}"

    // kafka connect
    compileOnly "org.apache.kafka:connect-api:${kafkaVersion}"
    compileOnly "org.apache.kafka:connect-runtime:${kafkaVersion}"

    // log
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // tests
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.apache.kafka:connect-api:${kafkaVersion}"
    testImplementation "org.apache.kafka:connect-runtime:${kafkaVersion}"
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "net.datafaker:datafaker:${datafakerVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
}

sourceSets {
    e2e {
        java {
            srcDirs("src/e2e")
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    e2eImplementation.extendsFrom testImplementation
    e2eRuntime.extendsFrom testRuntime
}

tasks.register("e2e", Test) {
    dependsOn "buildConfluentBundle"
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

def bundleDirectory = layout.buildDirectory.dir("bundle/${rootProject.name}").get()

shadowJar {
    mergeServiceFiles()
    destinationDirectory = bundleDirectory
    archiveBaseName = rootProject.name
    archiveClassifier = ""
    relocate "io.grpc", "shadow.io.grpc"
    manifest {
        attributes "Implementation-Version": version
    }
}

tasks.register("generateManifest", Task) {
    def data = [
            name             : rootProject.name,
            tags             : ["littlehorse", "microservice", "workflow", "workflow engine"],
            version          : version,
            title            : "LittleHorse Connector for Apache Kafka",
            description      : "The LittleHorse Server is a high-performance and developer-first platform for building Durable Workflows in code",
            documentation_url: "https://littlehorse.io/docs",
            owner            : [
                    username: "littlehorse",
                    name    : "LittleHorse Enterprises LLC",
                    url     : "https://littlehorse.io",
                    logo    : "assets/logo.svg"
            ],
            support          : [
                    logo         : "assets/logo.svg",
                    summary      : "Officially supported by LittleHorse Enterprises LLC",
                    url          : "https://littlehorse.io/contact",
                    provider_name: "LittleHorse Enterprises LLC"
            ],
            features         : [
                    supported_encodings                 : ["any"],
                    confluent_control_center_integration: true,
                    delivery_guarantee                  : ["exactly_once"],
                    single_message_transforms           : true,
                    kafka_connect_api                   : true
            ],
            logo             : "assets/logo.svg",
            source_url       : "https://github.com/littlehorse-enterprises/lh-kafka-connect",
            component_types  : ["sink"],
            release_date     : "${new Date().format("yyyy-MM-dd")}",
            license          : [
                    [
                            name: "Server Side Public License, Version 1",
                            url : "https://spdx.org/licenses/SSPL-1.0.html"
                    ]
            ]
    ]
    def manifestFile = bundleDirectory.file("manifest.json").asFile
    doFirst {
        manifestFile.parentFile.mkdirs()
        manifestFile.createNewFile()
    }
    doLast {
        file(manifestFile).write(JsonOutput.prettyPrint(JsonOutput.toJson(data)))
    }
}

tasks.register("copyAssets", Copy) {
    destinationDir = bundleDirectory.asFile
    from("../assets") {
        into("./assets")
    }
    from("../README.md") {
        into("./doc")
    }
}

tasks.register("generateConfigurationDoc", JavaExec) {
    dependsOn "assemble"
    def configurationsFile = bundleDirectory.file("doc/CONFIGURATIONS.md").asFile
    doFirst {
        configurationsFile.parentFile.mkdirs()
        configurationsFile.createNewFile()
    }
    doLast {
        copy {
            from configurationsFile
            into "../"
        }
    }
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "io.littlehorse.connect.util.ConfigExporter"
    args configurationsFile
}

tasks.register("buildConfluentBundle", Zip) {
    dependsOn "generateConfigurationDoc", "generateManifest", "copyAssets", "shadowJar"
    archiveFileName = "${rootProject.name}-${version}.zip"
    destinationDirectory = layout.buildDirectory.dir("dist")
    from bundleDirectory
}
